/*
ai-proto

ai proto for coder

API version: 0.0.3
Contact: panleiming@linksaas.pro
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ai_proto

import (
	"encoding/json"
	"fmt"
)

// Lang 编程语言
type Lang string

// List of Lang
const (
	PYTHON Lang = "python"
	C Lang = "c"
	CPLUSPLUS Lang = "cplusplus"
	JAVA Lang = "java"
	CSHARP Lang = "csharp"
	VISUALBASIC Lang = "visualbasic"
	JAVASCRIPT Lang = "javascript"
	SQL Lang = "sql"
	ASM Lang = "asm"
	PHP Lang = "php"
	R Lang = "r"
	GO Lang = "go"
	MATLAB Lang = "matlab"
	SWIFT Lang = "swift"
	DELPHI Lang = "delphi"
	RUBY Lang = "ruby"
	PERL Lang = "perl"
	OBJC Lang = "objc"
	RUST Lang = "rust"
)

// All allowed values of Lang enum
var AllowedLangEnumValues = []Lang{
	"python",
	"c",
	"cplusplus",
	"java",
	"csharp",
	"visualbasic",
	"javascript",
	"sql",
	"asm",
	"php",
	"r",
	"go",
	"matlab",
	"swift",
	"delphi",
	"ruby",
	"perl",
	"objc",
	"rust",
}

func (v *Lang) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Lang(value)
	for _, existing := range AllowedLangEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Lang", value)
}

// NewLangFromValue returns a pointer to a valid Lang
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLangFromValue(v string) (*Lang, error) {
	ev := Lang(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Lang: valid values are %v", v, AllowedLangEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Lang) IsValid() bool {
	for _, existing := range AllowedLangEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Lang value
func (v Lang) Ptr() *Lang {
	return &v
}

type NullableLang struct {
	value *Lang
	isSet bool
}

func (v NullableLang) Get() *Lang {
	return v.value
}

func (v *NullableLang) Set(val *Lang) {
	v.value = val
	v.isSet = true
}

func (v NullableLang) IsSet() bool {
	return v.isSet
}

func (v *NullableLang) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLang(val *Lang) *NullableLang {
	return &NullableLang{value: val, isSet: true}
}

func (v NullableLang) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLang) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

